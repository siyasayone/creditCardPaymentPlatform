package com.example.creditCardPayment.controllers.customerCreditCard;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/creditcardPayment/card")
public class CustomerCreditCardController {
	
	@Autowired
	CustomerCardService customerCardService;


	@PostMapping("/addCard")
	public ResponseEntity<CustomerCreditCard> addCustomerCard(@Valid @RequestBody CardDTO customerCardDTO,
			@AuthenticationPrincipal UserDetailsImpl loggeduser) throws ParseException {
		CustomerCreditCard card = customerCardService.addCustomerCard(customerCardDTO,loggeduser);
		return new ResponseEntity<>(card, HttpStatus.OK);
	}

	@PostMapping("/updateCard")
	public ResponseEntity<CustomerCreditCard> updateCard(@RequestBody CustomerCardDTO customerCardDTO,
			@AuthenticationPrincipal UserDetailsImpl loggeduser) throws ParseException, DateException {
		CustomerCreditCard card =customerCardService.updateCard(customerCardDTO,loggeduser);
		return new ResponseEntity<>(card, HttpStatus.OK);
	}
	
	@GetMapping("/removeCard")
	public ResponseEntity<Object> removeCard(@NotNull Long cardNumber) {
		return customerCardService.removeCard(cardNumber);

	}
	
	@GetMapping("/showCardDetails")
	public CardDTO showCardDetails(@AuthenticationPrincipal UserDetailsImpl loggeduser) {
		return customerCardService.showCardDetails(loggeduser);

	}

}
